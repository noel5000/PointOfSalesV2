// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace PointOfSalesV2.EntityFramework.Migrations
{
    [DbContext(typeof(MainDataContext))]
    partial class MainDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PointOfSalesV2.Entities.BranchOffice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BranchOffices");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("CashRegisters");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegisterOpening", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClosureDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MaxClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OpeningClosureDifference")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OpeningDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("TotalClosureAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalOpeningAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalPaymentsAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LocationId");

                    b.ToTable("CashRegisterOpenings");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CompositeProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BaseProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BaseProductUnitId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("BaseProductId");

                    b.HasIndex("BaseProductUnitId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductId");

                    b.ToTable("CompositeProducts");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CreditNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("Applied")
                        .HasColumnType("bit");

                    b.Property<string>("AppliedInvoiceNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginInvoiceNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CreditNotes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsLocalCurrency")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("AssignedWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("BillingAmountLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CardId")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditAmountLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("InvoiceDueDays")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<long?>("TRNControlId")
                        .HasColumnType("bigint");

                    b.Property<string>("TRNType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWarehouseId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TRNControlId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersBalance");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CheckbookNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("InvoiceCurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceCurrencyId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SellerId");

                    b.ToTable("CustomersPayments");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerReturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("CustomersReturns");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerReturnDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerReturnId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Defective")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductoId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerReturnId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("CustomersReturnDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ExpenseReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("GivenAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ReturnedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<string>("TRN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ExpenseTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("TaxId");

                    b.ToTable("ExpenseTaxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ExpensesPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("ExpenseCurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpenseReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExpenseCurrencyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ExpensesPayments");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InventoryEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InventoryEntries");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("AppliedCreditNoteAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NRC")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ReceivedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ReturnedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TRN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("TRNControlId")
                        .HasColumnType("bigint");

                    b.Property<string>("TRNType")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TRNControlId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditNoteAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Free")
                        .HasColumnType("bit");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrincipalCurrencyAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoicesDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("InvoiceDetail");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("TaxId");

                    b.ToTable("InvoicesTaxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code")
                        .HasName("Code");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Code = "EN",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 354, DateTimeKind.Local).AddTicks(6952),
                            Id = 1L,
                            Name = "English",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Code = "ES",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 354, DateTimeKind.Local).AddTicks(7585),
                            Id = 2L,
                            Name = "Spanish",
                            TranslationData = "[]"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.LanguageKey", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageCode", "Key");

                    b.ToTable("LanguageKeys");

                    b.HasData(
                        new
                        {
                            LanguageCode = "EN",
                            Key = "unitNotExist_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 354, DateTimeKind.Local).AddTicks(8794),
                            LanguageId = 1L,
                            Value = "Unit does not exist."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "parentUnitDoesntExist_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1787),
                            LanguageId = 1L,
                            Value = "Parent unit does not exist."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "ok_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1837),
                            LanguageId = 1L,
                            Value = "Operation completed successfully."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "error_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1840),
                            LanguageId = 1L,
                            Value = "Error: Could not completed the current operation. "
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "cannotUpdatePayment_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1843),
                            LanguageId = 1L,
                            Value = "Cannot update payment. "
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "invalidInvoice_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1850),
                            LanguageId = 1L,
                            Value = "Invalid invoice."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "owedAmountOutdated_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1853),
                            LanguageId = 1L,
                            Value = "Owed amount is outdated. please try update and try again."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "invoicePaid_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1856),
                            LanguageId = 1L,
                            Value = "Invoice is already paid."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "paymentNotValid_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1858),
                            LanguageId = 1L,
                            Value = "Payment is not valid."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "emptyInvoice_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1862),
                            LanguageId = 1L,
                            Value = "Invoice doesn't have any details. Cannot be empty."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "creditLimitReached_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1865),
                            LanguageId = 1L,
                            Value = "Credit limit reached. Cannot continue."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "trnNotAvailable_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1867),
                            LanguageId = 1L,
                            Value = "TRN is not available."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "outOfStock_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1869),
                            LanguageId = 1L,
                            Value = "Product is out of stock."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "defWarehouseNotExit_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1872),
                            LanguageId = 1L,
                            Value = "Defective warehouse does not exist. Please create one with 'DEF' as code first. "
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "notExistingClass_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1874),
                            LanguageId = 1L,
                            Value = "Cannot process this product/Service. Class does not exist."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "warehouseError_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1877),
                            LanguageId = 1L,
                            Value = "Warehouse does not exist."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "creditNoteNotExist_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1880),
                            LanguageId = 1L,
                            Value = "Credit note does not exist. "
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "creditNoteApplied_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1884),
                            LanguageId = 1L,
                            Value = "Credit note is already applied."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "differentCurrency_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1886),
                            LanguageId = 1L,
                            Value = "Currencies are different. You can only apply the same currency. "
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "amountIsGreater_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1889),
                            LanguageId = 1L,
                            Value = "Credit note amount is greater than invoice amount."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "productNeedsUnits_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1891),
                            LanguageId = 1L,
                            Value = "Product needs at least one unit."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "productNeedsPrimaryUnit_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1893),
                            LanguageId = 1L,
                            Value = "Product needs one primary unit."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "cannotEraseUnit_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1896),
                            LanguageId = 1L,
                            Value = "Cannot erase product unit."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "cannotDeleteTax_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1898),
                            LanguageId = 1L,
                            Value = "Cannot delete product tax. "
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "cannotRemoveBaseProduct_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1901),
                            LanguageId = 1L,
                            Value = "Cannot remove base product."
                        },
                        new
                        {
                            LanguageCode = "EN",
                            Key = "sequenceError_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(1915),
                            LanguageId = 1L,
                            Value = "Sequence Error."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "unitNotExist_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2110),
                            LanguageId = 2L,
                            Value = "Unit does not exist."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "parentUnitDoesntExist_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2116),
                            LanguageId = 2L,
                            Value = "Parent unit does not exist."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "ok_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2117),
                            LanguageId = 2L,
                            Value = "Operation completed successfully."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "error_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2119),
                            LanguageId = 2L,
                            Value = "Error: Could not completed the current operation. "
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "cannotUpdatePayment_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2120),
                            LanguageId = 2L,
                            Value = "Cannot update payment. "
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "invalidInvoice_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2123),
                            LanguageId = 2L,
                            Value = "Invalid invoice."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "owedAmountOutdated_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2125),
                            LanguageId = 2L,
                            Value = "Owed amount is outdated. please try update and try again."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "invoicePaid_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2126),
                            LanguageId = 2L,
                            Value = "Invoice is already paid."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "paymentNotValid_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2128),
                            LanguageId = 2L,
                            Value = "Payment is not valid."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "emptyInvoice_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2130),
                            LanguageId = 2L,
                            Value = "Invoice doesn't have any details. Cannot be empty."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "creditLimitReached_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2132),
                            LanguageId = 2L,
                            Value = "Credit limit reached. Cannot continue."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "trnNotAvailable_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2134),
                            LanguageId = 2L,
                            Value = "TRN is not available."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "outOfStock_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2136),
                            LanguageId = 2L,
                            Value = "Product is out of stock."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "defWarehouseNotExit_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2137),
                            LanguageId = 2L,
                            Value = "Defective warehouse does not exist. Please create one with 'DEF' as code first. "
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "notExistingClass_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2139),
                            LanguageId = 2L,
                            Value = "Cannot process this product/Service. Class does not exist."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "warehouseError_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2141),
                            LanguageId = 2L,
                            Value = "Warehouse does not exist."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "creditNoteNotExist_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2142),
                            LanguageId = 2L,
                            Value = "Credit note does not exist. "
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "creditNoteApplied_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2145),
                            LanguageId = 2L,
                            Value = "Credit note is already applied."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "differentCurrency_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2146),
                            LanguageId = 2L,
                            Value = "Currencies are different. You can only apply the same currency. "
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "amountIsGreater_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2148),
                            LanguageId = 2L,
                            Value = "Credit note amount is greater than invoice amount."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "productNeedsUnits_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2150),
                            LanguageId = 2L,
                            Value = "Product needs at least one unit."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "productNeedsPrimaryUnit_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2152),
                            LanguageId = 2L,
                            Value = "Product needs one primary unit."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "cannotEraseUnit_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2153),
                            LanguageId = 2L,
                            Value = "Cannot erase product unit."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "cannotDeleteTax_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2155),
                            LanguageId = 2L,
                            Value = "Cannot delete product tax. "
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "cannotRemoveBaseProduct_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2156),
                            LanguageId = 2L,
                            Value = "Cannot remove base product."
                        },
                        new
                        {
                            LanguageCode = "ES",
                            Key = "sequenceError_msg",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 355, DateTimeKind.Local).AddTicks(2158),
                            LanguageId = 2L,
                            Value = "Sequence Error."
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.MovementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = (short)1,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 342, DateTimeKind.Local).AddTicks(6104),
                            Name = "IN",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = (short)2,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 342, DateTimeKind.Local).AddTicks(6244),
                            Name = "OUT",
                            TranslationData = "[]"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.OpeningAmount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("OpeningsAmounts");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 334, DateTimeKind.Local).AddTicks(2761),
                            Name = "Permissions",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(4980),
                            Name = "CustomerRates",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5003),
                            Name = "Products",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5007),
                            Name = "CustomerPayments",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 5L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5010),
                            Name = "Currencies",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 6L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5037),
                            Name = "Taxes",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 7L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5041),
                            Name = "Invoices",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 8L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5044),
                            Name = "Quotes",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 9L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5047),
                            Name = "Customers",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 10L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5052),
                            Name = "Warehouses",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 11L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5055),
                            Name = "All",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 12L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5058),
                            Name = "Inventories",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 13L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5062),
                            Name = "TRNControl",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 14L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5065),
                            Name = "Expenses",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 15L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5068),
                            Name = "BranchOffices",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 16L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5071),
                            Name = "ExpensesPayments",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 17L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5074),
                            Name = "Suppliers",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 18L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5079),
                            Name = "Units",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 19L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5082),
                            Name = "Users",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 20L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5085),
                            Name = "PaymentTypes",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 21L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5088),
                            Name = "CashRegisters",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 22L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5091),
                            Name = "CashRegisterOpenings",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 23L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5276),
                            Name = "CashRegisterOpeningsAmounts",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 24L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5282),
                            Name = "IncomeMovements",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 25L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5285),
                            Name = "CustomersReturns",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 26L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5288),
                            Name = "SuppliersReturns",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 27L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5291),
                            Name = "WarehouseTransfers",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 28L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5294),
                            Name = "ProductUnits",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 29L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5298),
                            Name = "Roles",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 30L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5300),
                            Name = "Sections",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 31L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5304),
                            Name = "Operations",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 32L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5307),
                            Name = "Menu",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 33L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5310),
                            Name = "Sellers",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 34L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 335, DateTimeKind.Local).AddTicks(5315),
                            Name = "Zones",
                            TranslationData = "[]"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PaymentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PaymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = (short)1,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 337, DateTimeKind.Local).AddTicks(6777),
                            Name = "CASH",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = (short)2,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 337, DateTimeKind.Local).AddTicks(6889),
                            Name = "CHECK",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Code = (short)3,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 337, DateTimeKind.Local).AddTicks(7078),
                            Name = "CREDITCARD",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Code = (short)4,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 337, DateTimeKind.Local).AddTicks(7083),
                            Name = "BANKTRANSFER",
                            TranslationData = "[]"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailsClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Existence")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsCompositeProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Price2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Price3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ProductTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProductTaxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.RoleSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleSections");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1241),
                            Name = "Permissions",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1353),
                            Name = "CustomerRates",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1368),
                            Name = "Products",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1376),
                            Name = "CustomerPayments",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 5L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1385),
                            Name = "Currencies",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 6L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1426),
                            Name = "Taxes",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 7L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1436),
                            Name = "Invoices",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 8L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1446),
                            Name = "Quotes",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 9L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1457),
                            Name = "Customers",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 10L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1471),
                            Name = "Warehouses",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 11L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1482),
                            Name = "All",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 12L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1490),
                            Name = "Inventories",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 13L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1499),
                            Name = "TRNControl",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 14L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1510),
                            Name = "Expenses",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 15L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1521),
                            Name = "BranchOffices",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 16L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1529),
                            Name = "ExpensesPayments",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 17L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1537),
                            Name = "Suppliers",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 18L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1553),
                            Name = "Units",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 19L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1562),
                            Name = "Users",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 20L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1573),
                            Name = "PaymentTypes",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 21L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1581),
                            Name = "CashRegisters",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 22L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1592),
                            Name = "CashRegisterOpenings",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 23L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1603),
                            Name = "CashRegisterOpeningsAmounts",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 24L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1613),
                            Name = "IncomeMovements",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 25L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1621),
                            Name = "CustomersReturns",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 26L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1631),
                            Name = "SuppliersReturns",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 27L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1642),
                            Name = "WarehouseTransfers",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 28L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1651),
                            Name = "ProductUnits",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 29L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1660),
                            Name = "Roles",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 30L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1669),
                            Name = "Sections",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 31L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1680),
                            Name = "Operations",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 32L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1690),
                            Name = "Menu",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 33L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1698),
                            Name = "Sellers",
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 34L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(1712),
                            Name = "Zones",
                            TranslationData = "[]"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SectionOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SectionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SectionOperations");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Seller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CardId")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("ComissionByProduct")
                        .HasColumnType("bit");

                    b.Property<decimal>("ComissionRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FixedComission")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SequenceControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("NumericControl")
                        .HasColumnType("bigint");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SequencesControl");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = (short)1,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 339, DateTimeKind.Local).AddTicks(9787),
                            Name = "Invoices",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = (short)2,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(34),
                            Name = "Sellers",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Code = (short)3,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(49),
                            Name = "Customers",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Code = (short)4,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(59),
                            Name = "Quotes",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 5L,
                            Active = true,
                            Code = (short)5,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(69),
                            Name = "Expenses",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 6L,
                            Active = true,
                            Code = (short)6,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(85),
                            Name = "WarehouseTransfers",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 7L,
                            Active = true,
                            Code = (short)7,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(96),
                            Name = "InventoryIncomes",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 8L,
                            Active = true,
                            Code = (short)8,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(106),
                            Name = "CustomersReturns",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 9L,
                            Active = true,
                            Code = (short)9,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(117),
                            Name = "SupplierReturns",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 10L,
                            Active = true,
                            Code = (short)10,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(130),
                            Name = "CustomerPayments",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        },
                        new
                        {
                            Id = 11L,
                            Active = true,
                            Code = (short)11,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 340, DateTimeKind.Local).AddTicks(139),
                            Name = "ExpensesPayments",
                            NumericControl = 0L,
                            TranslationData = "[]"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CardId")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SupplierBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SuppliersBalances");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SupplierReturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SuppliersReturns");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.TRNControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("NumericControl")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("TRNsControl");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Tax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UnitProductEquivalence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Equivalence")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitProductsEquivalences");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<long?>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<int>("CashRegisterOpenningTimeHours")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Size")
                        .HasColumnType("float");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("UserId");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            Active = true,
                            Address = "",
                            BirthDay = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CashRegisterOpenningTimeHours = 0,
                            ContentType = "",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2019, 12, 28, 16, 31, 50, 343, DateTimeKind.Local).AddTicks(7281),
                            Email = "admin@admin.com",
                            Gender = "M",
                            LastName = "admin",
                            Mobile = "8095555555",
                            Name = "admin",
                            Password = "yeLiBgtdL//mX+coUwD6bw==",
                            Phone = "8095555555",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserClaims", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersClaims");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<string>("OperationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationViewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperation");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.WarehouseMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehousesMovements");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.WarehouseTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DestinyId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("OriginId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrigingId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DestinyId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("WarehousesTransfers");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ReturnDetail", b =>
                {
                    b.HasBaseType("PointOfSalesV2.Entities.InvoiceDetail");

                    b.HasDiscriminator().HasValue("ReturnDetail");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegister", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegisterOpening", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.CashRegister", "CashRegister")
                        .WithMany()
                        .HasForeignKey("CashRegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CompositeProduct", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "BaseProduct")
                        .WithMany()
                        .HasForeignKey("BaseProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.UnitProductEquivalence", "UnitProductEquivalence")
                        .WithMany()
                        .HasForeignKey("BaseProductUnitId");

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany("BaseCompositeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CreditNote", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Customer", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("AssignedWarehouseId");

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.TRNControl", "TRNControl")
                        .WithMany()
                        .HasForeignKey("TRNControlId");

                    b.HasOne("PointOfSalesV2.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerBalance", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerPayment", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "InvoiceCurrency")
                        .WithMany()
                        .HasForeignKey("InvoiceCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Invoice", null)
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("PointOfSalesV2.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerReturn", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerReturnDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.CustomerReturn", null)
                        .WithMany("ReturnDetails")
                        .HasForeignKey("CustomerReturnId");

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Expense", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ExpenseTax", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Expense", "Expense")
                        .WithMany("Taxes")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ExpensesPayment", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "ExpenseCurrency")
                        .WithMany()
                        .HasForeignKey("ExpenseCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Inventory", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany("Inventory")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InventoryEntry", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Invoice", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.HasOne("PointOfSalesV2.Entities.TRNControl", "TNRControl")
                        .WithMany()
                        .HasForeignKey("TRNControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceTax", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Invoice", null)
                        .WithMany("Taxes")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.LanguageKey", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PaymentDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Product", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ProductTax", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany("Taxes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.RoleSection", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Role", null)
                        .WithMany("Sections")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Seller", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SupplierBalance", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SupplierReturn", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UnitProductEquivalence", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.User", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId");

                    b.HasOne("PointOfSalesV2.Entities.CashRegister", "CashRegister")
                        .WithMany()
                        .HasForeignKey("CashRegisterId");

                    b.HasOne("PointOfSalesV2.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode");

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserClaims", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserOperation", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserRole", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Warehouse", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany("Warehouses")
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.WarehouseMovement", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.WarehouseTransfer", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Destiny")
                        .WithMany()
                        .HasForeignKey("DestinyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
